#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.62.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_initialize_provider_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "initialize_provider",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(initialize_provider()),
    )
}
fn wire_initialize_locked_provider_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "initialize_locked_provider",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(initialize_locked_provider()),
    )
}
fn wire_initialize_ftp_url_impl(
    path: impl Wire2Api<String> + UnwindSafe,
    host: impl Wire2Api<String> + UnwindSafe,
    user: impl Wire2Api<String> + UnwindSafe,
    pass: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "initialize_ftp_url",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_path = path.wire2api();
            let api_host = host.wire2api();
            let api_user = user.wire2api();
            let api_pass = pass.wire2api();
            Ok(initialize_ftp_url(api_path, api_host, api_user, api_pass))
        },
    )
}
fn wire_connect_impl(
    port_: MessagePort,
    provider_lock: impl Wire2Api<RustOpaque<RwLock<FtpProvider>>> + UnwindSafe,
    url: impl Wire2Api<RustOpaque<FtpUrl>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_lock = provider_lock.wire2api();
            let api_url = url.wire2api();
            move |task_callback| Ok(connect(api_provider_lock, api_url))
        },
    )
}
fn wire_disconnect_impl(
    port_: MessagePort,
    provider_lock: impl Wire2Api<RustOpaque<RwLock<FtpProvider>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disconnect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_lock = provider_lock.wire2api();
            move |task_callback| Ok(disconnect(api_provider_lock))
        },
    )
}
fn wire_check_connection_impl(
    port_: MessagePort,
    provider_lock: impl Wire2Api<RustOpaque<RwLock<FtpProvider>>> + UnwindSafe,
    url: impl Wire2Api<RustOpaque<FtpUrl>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "check_connection",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_lock = provider_lock.wire2api();
            let api_url = url.wire2api();
            move |task_callback| Ok(check_connection(api_provider_lock, api_url))
        },
    )
}
fn wire_read_file_impl(
    port_: MessagePort,
    provider_lock: impl Wire2Api<RustOpaque<RwLock<FtpProvider>>> + UnwindSafe,
    url: impl Wire2Api<RustOpaque<FtpUrl>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "read_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_lock = provider_lock.wire2api();
            let api_url = url.wire2api();
            move |task_callback| Ok(read_file(api_provider_lock, api_url))
        },
    )
}
fn wire_update_file_impl(
    port_: MessagePort,
    provider_lock: impl Wire2Api<RustOpaque<RwLock<FtpProvider>>> + UnwindSafe,
    url: impl Wire2Api<RustOpaque<FtpUrl>> + UnwindSafe,
    contents: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "update_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_lock = provider_lock.wire2api();
            let api_url = url.wire2api();
            let api_contents = contents.wire2api();
            move |task_callback| Ok(update_file(api_provider_lock, api_url, api_contents))
        },
    )
}
fn wire_delete_file_impl(
    port_: MessagePort,
    provider_lock: impl Wire2Api<RustOpaque<RwLock<FtpProvider>>> + UnwindSafe,
    url: impl Wire2Api<RustOpaque<FtpUrl>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "delete_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_lock = provider_lock.wire2api();
            let api_url = url.wire2api();
            move |task_callback| Ok(delete_file(api_provider_lock, api_url))
        },
    )
}
fn wire_file_exists_impl(
    port_: MessagePort,
    provider_lock: impl Wire2Api<RustOpaque<RwLock<FtpProvider>>> + UnwindSafe,
    url: impl Wire2Api<RustOpaque<FtpUrl>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "file_exists",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_lock = provider_lock.wire2api();
            let api_url = url.wire2api();
            move |task_callback| Ok(file_exists(api_provider_lock, api_url))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
